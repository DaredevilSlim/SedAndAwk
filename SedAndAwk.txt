Параметры командной строки для команды sed:
Опция	Описание
-e		Использование нескольких инструкций редактирования следующих одна за другой
-f		Использование файла сценария содержащего инструкции редактирования
-n		Автоматическое подавление вывода входных строк




Параметры командной строки для команды awk:
Опция	Описание
-F		Использование альтернативного разделителя полей (не пробел или табуляция).
-f		Использование файла сценария содержащего инструкции редактирования.
-v		var=value следует.

Сообщения об ошибках:
Не заключать процедуру в фигурные скобки ({})
Не заключать инструкции в одинарные кавычки (`')
Не заключать регулярные выражения в косые черты (//)




Классы символов POSIX:
[: alnum:] - Печатные символы (включая пробелы)
[: alpha:] - Буквенные символы
[: blank:] - Пробелы и символы табуляции
[: cntrl:] - Управляющие символы
[: digit:] - Цифровые символы
[: graph:] - Печатные и видимые (не пробелы) символы
[: lower:] - Строчные буквы
[: print:] - Печатные символы (включая пробелы)
[: punct:] - Знаки пунктуации
[: пробел:] - Пробельные символы
[: upper:] - Заглавные буквы
[: xdigit:] - Шестнадцатеричные цифры



2. Понимание простых операций
Использование sed
Два способа использовать sed или задать инструкции редактирования в командной строке или поместить их в файл и присвоить этому файлу соответствующее имя.

Указание простой инструкции
Простая команда редактирования для командной строки (изменения в данном случае в файл не вносятся):
sed [-e] 'instruction' file
Опция "-e" необходима только тогда, когда указывается более одной инструкции в командной строке. Она сообщает sed интерпретировать следующий аргумент как инструкцию. Когда есть одна инструкция, sed может сделать это самостоятельно.
Пример замены значения "MA" на значение "Massachusetts" используя команду "s" в файле list. Замена выполнена лишь в трех строках, но выводятся все строки (изменения в данном случае в файл не вносятся):
sed 's/MA/Massachusetts/' list
Инструкции не обязательно всегда должны быть заключены в одинарные кавычки, но желательно всегда их использовать для предотвращения не корректного интерпретирования спецсимволов или пробелов находящихся в этой инструкции. Оболочка использует пробелы для определения отдельных аргументов, передаваемых программе; символы, которые являются специальными для оболочки, расширяются до того, как команда вызывается.
Еще один пример в котором использование одинарных кавычек обязательно так как команда замены содержит символы пробела (изменения в данном случае в файл не вносятся):
sed 's/ MA/, Massachusetts/' list
Существует три способа указания нескольких инструкций редактирования в командной строке:
1) Отделить инструкции точкой с запятой (изменения в данном случае в файл не вносятся):
sed 's/ MA/, Massachusetts/; s/ PA/, Pennsylvania/' list
2) Указывать опцию "-e" перед каждой инструкцией (изменения в данном случае в файл не вносятся):
sed -e 's/ MA/, Massachusetts/' -e 's/ PA/, Pennsylvania/' list
3) Использовать возможность многострочного ввода оболочки Bourne (данная техника не будет работать в C shell, так как в таком случае в конце каждой строки в оболочке C shell необходимо указывать ";"). После ввода одинарной кавычки нажмите RETURN, и для многострочного ввода отобразится вторичная подсказка (>) (изменения в данном случае в файл не вносятся):
sed '
s/ MA/, Massachusetts/
s/ PA/, Pennsylvania/
s/ CA/, California/' list

Искаженная команда
Синтаксис команд sed может содержать большое количество деталей, и как результат легко сделать ошибку или пропустить необходимый элемент.
Пример того что происходит в случае не корректного синтаксиса:
sed -e 's/MA/Massachusetts' list
Результат выполнения:
sed: -e expression #1, char 18: unterminated `s' command

Файлы сценариев
Так как вводить в командной строке нецелесообразно то в таких случаях лучше использовать файлы сценариев, содержащие инструкции по редактированию. Сценарий редактирования - это просто список команд sed, которые выполняются в том порядке, в котором они указанны в файле сценария. Эта форма, используя параметр "-f", требует чтобы было указано имя файла сценария в командной строке.
Пример использования файла сценария редактирования (изменения в данном случае в файл не вносятся):
sed -f nameState list

Сохранение вывода
Для перенаправления результата выполнения сценария редактирования в файл используется инструмент переадресации ввода/вывода оболочки символ ">". Не стоит выполнять перенаправление непосредственно в редактируемый файл, так как он будет испорчен.
Перенаправление результата выполнения сценария редактирования в файл (изменения будут внесены в файл "newlist"):
sed -f nameState list > newlist

Подавление автоматического отображения строк ввода
Параметр "-n" подавляет автоматический вывод. При указании этого параметра каждая инструкция, предназначенная для вывода, должна содержать команду печати, "p".
Пример использования sed с опцией автоматического подавления вывода (будут выведены лишь редактируемые строки, изменения в данном случае в файл не вносятся):
sed -n -e 's/MA/Massachusetts/p' list

Использование awk
Как и sed, awk выполняет набор инструкций для каждой строки ввода. Можно как задать инструкции в командной строке так и создать файл сценария.

Запуск awk
Синтаксис awk для командной строки:
awk 'instructions' files
Чтение строки может производится, как из одного или нескольких файлов одновременно, так и со стандартного потока ввода. Инструкции должны быть заключены в одинарные кавычки для защиты их от оболочки shell. Инструкции в основной своей массе содержат фигурные скобки или знаки доллара, которые интерпретируются оболочкой shell, как спецсимволы. Множественные команды могут быть введены аналогично как при использовании sed, то есть быть разделенными точкой с запятой или указаны в нескольких строчках.
В основном awk программы записываются в файлы сценариев, где они могут быть протестированы и модифицированы.
awk -f script files
Опция "-f" позволяет использовать файл сценария содержащего инструкции редактирования.
Awk, как правило, интерпретирует каждую строку ввода как запись и каждое слово в этой строке, разделяет пробелами или табуляцией, как поле. (Эти умолчания могут быть изменены). Один или несколько последовательных пробелов или табуляции считаются одним разделителем. Awk позволяет ссылаться на эти поля в шаблонах или процедурах. "$0" представляет всю строку ввода. "$1", "$2", ... относятся к отдельным полям в строке ввода. Awk разбивает входную запись перед применением сценария.
Пример вывода первого поля каждой строки (изменения в данном случае в файл не вносятся):
awk '{ print $1 }' list
Пример вывода всех строк содержащих шаблон "/MA/" (изменения в данном случае в файл не вносятся):
awk '/MA/' list
Пример вывода первого поля для всех строк содержащих шаблон "/MA/" (изменения в данном случае в файл не вносятся):
awk '/MA/ { print $1 }' list
Пример вывода первого поля для всех строк содержащих шаблон "/MA/", а также в качестве разделителя используется запятая (изменения в данном случае в файл не вносятся):
awk -F, '/MA/ { print $1 }' list
Пример вывода первого, второго и третьего полей каждой строки на отдельной строке и в качестве разделителя используется запятая (изменения в данном случае в файл не вносятся):
awk -F, '{ print $1; print $2; print $3 }' list

Совместное использование sed and awk
В UNIX пайп может использоваться в качестве вывода одной программы как ввод для следующей программы.
Пример вывода имен всех штатов из каждой записи. В данном случае sed выполняет замену сокращенного названия штата на полное отделяя запятой от названия города, а awk используя в качестве разделителя запятую выполняет вывод лишь поля с названием штата (изменения в данном случае в файл не вносятся):
sed -f nameState list | awk -F, '{ print $4 }'
Пример вывода отсортированных  штатов и группировка имен, которые имеют аналогичный штат. В данном случае sed выполняет замену сокращенного названия штата на полное отделяя запятой от названия города. awk используя в качестве разделителя запятую выполняет вывод лишь поля с названием штата и отправляет результат вывода программе sort и снова вызывает awk для проверки отсортированный ввод и определяет если название штата в текущей записи так и в предыдущей записи (изменения в данном случае в файл не вносятся):
sed -f nameState list | sh byState
Пример вывода объединения поля содержащего название штата и всей строки:
sed -f nameState list | awk -F, '{ print $4 ", " $0 }'




3. Понимание синтаксиса регулярных выражений
. - точка, соответствует любому единичному символу, кроме новой строки. В awk также может соответствовать символу новой строки.
* - звездочка, соответствует любому количеству (включая нулю) единичных символов.
.* - точка со звездочкой, соответствует любому количеству символов.
[] - квадратные скобки, соответствует одному из классов символов заключенных в квадратные скобки. ^ - циркумфлекс, в случае если указан первым символом в квадратных скобках соответствует противоположному значению символов перечисленных в квадратных скобках, исключая символ новой строки. В awk так же может соответствовать символу новой строки. - - дефис используется для указания диапазона символов.
^ - циркумфлекс, в качестве первого символа в регулярном выражении соответствует началу строки. В awk соответствует символу новой строки даже если строка содержит встроенные новые строки.
$ - символ доллара, в качестве последнего символа в регулярном выражении соответствует символу конца строки. В awk соответствует символу конца строки даже если строка содержит встроенные новые строки.
{n,m} - фигурные скобки, соответствуют диапазону вхождений одного символа (включая символ заданный регулярным выражением), которое непосредственно предшествует ему. {n} - соответствует точно n вхождениям, {n,} - соответствует как минимум n вхождениям, и {n,m} - соответствует любому количеству вхождений между n и m.
\ - обратная косая черта, экранирует следующий за ним спецсимвол.
+ - плюс, соответствует одному или более вхождениям регулярного выражения.
? - вопросительный знак, соответствует нулю или одному вхождению регулярного выражения.
| - пайп, задает, что одно из двух из следующих вхождений регулярного выражения может соответствовать (чередование).
() - скобки, группируют регулярные выражения.

Обратная косая черта, метасимвол трансформирующий метасимволы в обычный символ.
\.   - соответствует промежутку в три пробельных символа.


























31
